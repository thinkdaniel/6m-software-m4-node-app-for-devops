# This file tells CircleCI what to do
version: 2.1
orbs:
  node: circleci/node@5.0.1
  docker: circleci/docker@2.1.4
  heroku: circleci/heroku@2.0.0

# commands are reusable sets of steps
commands:
  # Define install_deps command for installing dependencies
  install_deps:
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm

# Each job has 2 parts - 1. Executor, 2. Steps
jobs:
  build:
    # Long form of the executor
    # executor:
    #   name: docker
    #   docker:
    #     - image: cimg/node:16.10
    # Means spin up a container using node:16.10 and run the steps
    # Shorthand for the executor
    docker:
      - image: cimg/node:16.10
    steps:
      - install_deps
      # Using node/install-packages is better than npm install
      # because it gives you CircleCI optimization (caching, lockfile, concise)
      # - node/install-packages:
      #     pkg-manager: npm
      # Without orbs, we have to run everything manually using run
      # - run: |
      #     echo "Installing dependencies"
      #     npm install
  lint:
    docker:
      - image: cimg/node:20.12
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: |
          echo "Running lint..."
          npm run lint
  test:
    docker:
      - image: cimg/node:16.10
    steps:
      - install_deps
      # - checkout
      # - node/install-packages:
      #     pkg-manager: npm
      - run: |
          echo "Running tests..."
          npm run test
  publish:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      # Ensure DOCKER_LOGIN and DOCKER_PASSWORD set in CircleCI Project Settings
      # CircleCI Docker Orb will automatically use these credentials
      # docker/check does 3 things:
      # 1. Verifies Docker is working
      # 2. Authenticates with Docker Hub using your credentials
      # 3. Sets up the Docker client for subsequent operations
      # without this we have to manually run docker login
      - docker/check
      - docker/build:
          image: thinkdaniel/test-repository
          tag: << pipeline.git.revision >>,latest
      - docker/push:
          image: thinkdaniel/test-repository
          tag: << pipeline.git.revision >>,latest
  deploy:
    docker:
      - image: cimg/node:16.10
    steps:
      - setup_remote_docker
      - heroku/install
      - checkout
      - docker/check
      - run:
          name: Deploy to Heroku
          command: |
            echo "Deploying pre-built image to Heroku..."
            heroku container:login
            # Use the Heroku container stack
            # Special container stack is required to deploy Docker images
            heroku stack:set container --app thinkdaniel-su-devops
            # Pull image that was built in the publish job
            docker pull thinkdaniel/test-repository:latest
            # Tag it for Heroku
            docker tag thinkdaniel/test-repository:<< pipeline.git.revision >> registry.heroku.com/thinkdaniel-su-devops/web
            # Release the pushed Docker image
            heroku container:release web --app thinkdaniel-su-devops
  # deploy:
  #   docker:
  #     - image: cimg/node:16.10
  #   steps:
  #     - setup_remote_docker
  #     - heroku/install
  #     - checkout
  #     - run:
  #         name: Heroku Container Push
  #         command: |
  #           echo "Pushing Docker container to Heroku..."
  #           heroku container:login
  #           # Use the Heroku container stack
  #           # Special container stack is required to deploy Docker images
  #           heroku stack:set container --app thinkdaniel-su-devops
  #           # Build Docker image locally and push to Heroku container registry
  #           heroku container:push web --app thinkdaniel-su-devops
  #           # Release the pushed Docker image
  #           heroku container:release web --app thinkdaniel-su-devops

# Define the workflow for job execution order
workflows:
  simple_workflow:
    jobs:
      - build # Run build job first
      - lint: # Run lint job after build
          requires:
            - build
      - test: # Run test job after build
          requires:
            - build # test depends on build
      - publish: # Run publish job after test and lint
          requires:
            - test
            - lint
      - deploy:
          requires:
            - publish